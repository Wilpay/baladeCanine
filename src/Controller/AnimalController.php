<?php


namespace App\Controller;


use App\Entity\Animal;
use App\Entity\ProfilAnimal;
use App\Form\AnimalType;
use App\Form\ProfilAnimalType;
use App\Form\ProfilType;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface;

class AnimalController extends Controller
{
    /**
     * @Route("/animal", name="animal")
     */
    public function Animal(Request $request, EntityManagerInterface $em, UserPasswordEncoderInterface $encoder) {

        $animal = new Animal();
        $user = $this->getUser();
        $form = $this->createForm(AnimalType::class, $animal);
        $form->handleRequest($request);
        if($form->isSubmitted() && $form->isValid()){

            $animal->setMaitre($user);
            $profilanimal = new ProfilAnimal();
            $profilanimal->setAnimal($animal);

            $em->persist($profilanimal);
            $em->persist($animal);
            $em->flush();
            $this->addFlash('success', 'Animal ajouté');
            return $this->redirectToRoute('mesanimaux');
        }

        return $this->render('Animal/nouveau.html.twig', [
            'form' => $form->createView(),
        ]);
    }

    /**
     * @Route("/mesanimaux", name="mesanimaux")
     */
    public function MesAnimaux(Request $request, EntityManagerInterface $em, UserPasswordEncoderInterface $encoder) {

        $animaux = $em->getRepository(Animal::class)->findByMaitre($this->getUser()->getId());

        return $this->render('Animal/animaux.html.twig', [
            'animaux' => $animaux,
        ]);
    }

    /**
     * @Route("/modifier/{id}", name="modifier")
     */
    public function Modifier(Request $request, EntityManagerInterface $em, UserPasswordEncoderInterface $encoder, $id) {

        $animal = $em->getRepository(Animal::class)->find($id);
        $profilAnimal = $em->getRepository(ProfilAnimal::class)->findOneById($id);
        $form = $this->createForm(AnimalType::class, $animal);
        $formPhoto = $this->createForm(ProfilAnimalType::class, $profilAnimal);
        $form->handleRequest($request);
        $formPhoto->handleRequest($request);
        if($form->isSubmitted() && $form->isValid()){

            $em->persist($animal);
            $em->flush();
            $this->addFlash('success', 'Animal modifié');
            return $this->redirectToRoute('mesanimaux');
        }
        else if($formPhoto->isSubmitted() && $formPhoto->isValid()) {
            if (null !== $formPhoto['file']->getData()) {
                $file = $formPhoto['file']->getData();
                // Efface le fichier et le nom déjà existant
                if (null !== $profilAnimal->getImage()) {
                    $oldFile = $this->getParameter('download_dir') . '/' . $profilAnimal->getImage();
                    if (file_exists($oldFile)) {
                        unlink($oldFile);
                    }
                }
                $filename = $this->generateUniqueFileName() . '.' . $file->guessExtension();
                $profilAnimal->setImage($filename);
                $file->move(
                    $this->getParameter('download_dir'),
                    $filename
                );
                $animal->setImage($filename);
                $em->persist($animal);
                $em->persist($profilAnimal);
                $em->flush();
                $this->addFlash('success', 'Animal modifié');
                return $this->redirectToRoute('modifier', array('id' => $id));
            }
        }

        return $this->render('Animal/modifier.html.twig', [
            'form' => $form->createView(),
            'formPhoto' =>$formPhoto->createView(),
            'profil' => $profilAnimal,
        ]);
    }

    /**
     * @Route("/delete/{id}", name="delete")
     */
    public function Delete(Request $request, EntityManagerInterface $em, UserPasswordEncoderInterface $encoder, $id) {

        $animal = $em->getRepository(Animal::class)->find($id);
        $profilAnimal = $em->getRepository(ProfilAnimal::class)->findOneById($id);
        $em->remove($profilAnimal);
        $em->remove($animal);
        $em->flush();


        return $this->redirectToRoute('mesanimaux');
    }
    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
}